service: serverless-blog

custom:
  settings:
    DYNAMODB_TABLE: BlogTable
provider:
  name: aws
  runtime: nodejs10.x
  profile: therealneotamoe
  region: us-east-2
  environment: ${self:custom.settings}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamoDB:Query
        - dynamoDB:GetItem
        - dynamoDB:PutItem
        - dynamoDB:UpdateItem
        - dynamoDB:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:090824678690:table/${self:custom.settings.DYNAMODB_TABLE}"
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createArticle:
    handler: articles/create.handler
    events:
      - http:
          path: articles
          method: post
  readArticle:
    handler: articles/read.handler
    events:
      - http:
          path: articles
          method: get
  updateArticle:
    handler: articles/update.handler
    events:
      - http:
          path: articles
          method: put
  deleteArticle:
    handler: articles/delete.handler
    events:
      - http:
          path: articles
          method: delete

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
 Resources:
   BlogTable:
     Type: AWS::DynamoDB::Table
     Properties:
        TableName: BlogTable
        AttributeDefinitions:
        - AttributeName: article_id
          AttributeType: S
        KeySchema:
        - AttributeName: article_id
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
